//-----------------------------------------------------------------------------------------------------------------------------------------------
// A.M. Tykvinsky, 19.10.2020
//-----------------------------------------------------------------------------------------------------------------------------------------------

#ifndef _APERIODIC_FILT_HPP
#define _APERIODIC_FILT_HPP

// ФИЛЬТР АПЕРИОДИЧЕСКОЙ СЛАГАЮЩЕЙ И ВТОРОЙ ГАРМОНИКИ

#include "mirror_ring_buff_x32.hpp"

class aperiodic_filt
{

private:

	// системные переменные:
	int    m_order;    // порядок фильтра
	int    m_ElemNum; // к - во элементов в буффере
	double m_Fn;     // номинальная частота сети
	double m_Fs;    // частота дискретизации АЦП
	double m_Ts;   // период дискретизации АЦП
	
	// зеркальные буфферы:
	mirror_ring_buff m_MBUFF;

public:

	// входы фильтра:
	double m_in_F;
	
	// выход фильтра:
	double m_out;
	double m_pH;
	double m_Km;
		
	// функция инициализации фильтра:	
	int filtInit( double Fs , double Fn );
	
	// функция выделения памяти:
	int allocate();
	
	// функция освобождения памяти:
	int deallocate();
	
	// конструктор по умолчанию
	aperiodic_filt();

	// деструктор
	~aperiodic_filt();
	
	// функция расчета АЧХ и ФЧХ:
	int FreqCharacteristics();
	
	// ВСТРОЕННЫЕ ФУНКЦИИ:
	//-----------------------------------------------------------------------------------------------------------------------------------------------
	// функция фильтрации:
	inline int filt(double *input)
	{	
		// прогон сигнала через фильтр:
		m_MBUFF.fill_buff(input , 1);
		m_out = *input - m_MBUFF.m_ptr_fill_down[m_ElemNum];
		
		return 0;
	}
	//-----------------------------------------------------------------------------------------------------------------------------------------------

};

#endif
